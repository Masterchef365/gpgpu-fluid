#version 450
layout (local_size_x = 32, local_size_y = 32) in;

uniform layout(binding=0) sampler2D read_u;
uniform layout(binding=1) sampler2D read_v;
uniform layout(binding=2, r32f) restrict image2D write_u;
uniform layout(binding=3, r32f) restrict image2D write_v;
uniform layout(location=0) float dt;

float bilinear(sampler2D img, vec2 pt) {
    vec2 size = imageSize(write_u);
    return texture(img, pt / size).x;
}

void main() {
    ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
    vec2 tex_size = vec2(imageSize(write_u));

    vec2 uv = xy / tex_size;
    uv = uv * 2. - 1.;

    if (dt == 0.) {
        vec2 vel = float(length(uv) < 0.2) * vec2(30, 0);
        //vec2 vel = vec2(0);
        imageStore(write_u, xy, vec4(vel.x, 0,0,0));
        imageStore(write_v, xy, vec4(vel.y, 0,0,0));
        return;
    }

    // Advect u
    float u, v;
    vec2 k;
    u = bilinear(read_u, xy + vec2(0.5));
    v = bilinear(read_v, xy + vec2(1,0));
    k = vec2(xy) - vec2(u, v) * dt;
    float next_u = bilinear(read_u, k + vec2(0.5)).x;

    // Advect v
    u = bilinear(read_u, xy + vec2(0,1)).x;
    v = bilinear(read_v, xy + vec2(0.5)).x;
    k = vec2(xy) - vec2(u, v) * dt;
    float next_v = bilinear(read_v, k + vec2(0.5)).x;

    vec2 vel = vec2(next_u, next_v);
    //vel += float(length(uv) < 0.2) * vec2(0.2, 0);

    // Write semi-lagrangian calc
    imageStore(write_u, xy, vec4(vel.x, 0,0,0));
    imageStore(write_v, xy, vec4(vel.y, 0,0,0));
}
