#version 450
layout (local_size_x = 32, local_size_y = 32) in;

uniform layout(binding=0) sampler2D read_u;
uniform layout(binding=1) sampler2D read_v;
uniform layout(binding=2, r32f) restrict image2D write_u;
uniform layout(binding=3, r32f) restrict image2D write_v;
uniform layout(location=0) float dt;

float bilinear(sampler2D img, vec2 pt) {
    vec2 size = imageSize(write_u);
    vec2 tex_coord = (pt + vec2(0.5)) / size;
    return texture(img, tex_coord).x;
}

vec2 gradient(sampler2D img, vec2 pt) {
    vec2 size = imageSize(write_u);
    vec4 corners = vec4(
        texture(img, (floor(pt) + vec2(0.5) + vec2(0, 0)) / size).x,
        texture(img, (floor(pt) + vec2(0.5) + vec2(1, 0)) / size).x,
        texture(img, (floor(pt) + vec2(0.5) + vec2(0, 1)) / size).x,
        texture(img, (floor(pt) + vec2(0.5) + vec2(1, 1)) / size).x
    );

    vec2 f = fract(pt);
    return mix(
        mix(
            vec2(f.y - 1., f.x - 1.) * corners.x,
            vec2(1. - f.y, -f.x) * corners.y,
            f.x
        ),
        mix(
            vec2(-f.y, 1. - f.x) * corners.z,
            vec2(f.y, f.x) * corners.w,
            f.x
        ),
        f.y
    );
}

float advect_component(sampler2D img, vec2 gid, vec2 u_offset, vec2 v_offset) {
    float u = bilinear(read_u, gid + u_offset);
    float v = bilinear(read_v, gid + v_offset);
    vec2 dr = vec2(u, v) * dt;
    vec2 sample_loc = vec2(gid) - dr;
    float next = bilinear(img, sample_loc);
    vec2 c = gradient(img, sample_loc);
    next += dot(c, dr);
    return next;
}

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    vec2 size = vec2(imageSize(write_u));

    vec2 uv = gid / size;
    uv = uv * 2. - 1.;

    if (dt == 9999.) {
        vec2 vel = vec2(0);
        imageStore(write_u, gid, vec4(vel.x, 0,0,0));
        imageStore(write_v, gid, vec4(vel.y, 0,0,0));
        return;
    }

    float next_u = advect_component(read_u, gid, vec2(0), vec2(0.5,-0.5));
    float next_v = advect_component(read_v, gid, vec2(-0.5,0.5), vec2(0));

    imageStore(write_u, gid, vec4(next_u, 0,0,0));
    imageStore(write_v, gid, vec4(next_v, 0,0,0));
}
