#version 450
layout (local_size_x = 32, local_size_y = 32) in;

uniform layout(binding=0) sampler2D read_u;
uniform layout(binding=1) sampler2D read_v;
uniform layout(binding=2, r32f) restrict image2D write_u;
uniform layout(binding=3, r32f) restrict image2D write_v;
uniform layout(location=0) float dt;

float bilinear(sampler2D img, vec2 pt) {
    vec2 size = imageSize(write_u);
    vec2 adjusted = pt + vec2(0.5);
    vec2 tex_coord = adjusted / size;
    return texture(img, tex_coord).x;
}

vec2 gradient(sampler2D img, vec2 pt) {
    vec2 size = imageSize(write_u);
    vec2 adjusted = pt + vec2(0.5);
    vec2 tex_coord = adjusted / size;
    vec4 corners = textureGather(img, tex_coord);

    vec2 f = fract(pt);
    return vec2(f.y - 1., f.x - 1.) * corners.x
        + vec2(-f.y, 1. - f.x) * corners.y
        + vec2(1. - f.y, -f.x) * corners.z
        + vec2(f.y, f.x) * corners.w;
}

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    vec2 size = vec2(imageSize(write_u));

    vec2 uv = gid / size;
    uv = uv * 2. - 1.;

    if (dt == 9999.) {
        //vec2 vel = float(length(uv) < 0.2) * vec2(0, -1);
        vec2 vel = vec2(0);
        imageStore(write_u, gid, vec4(vel.x, 0,0,0));
        imageStore(write_v, gid, vec4(vel.y, 0,0,0));
        return;
    }

    // Advect u
    float u, v;
    u = bilinear(read_u, gid);
    v = bilinear(read_v, gid + vec2(0.5,-0.5));
    vec2 off_u = vec2(u, v) * dt;
    vec2 u_sample_loc = vec2(gid) - off_u;
    float next_u = bilinear(read_u, u_sample_loc).x;
    vec2 c_u = gradient(read_u, u_sample_loc);
    next_u += dot(c_u, off_u);

    // Advect v
    u = bilinear(read_u, gid + vec2(-0.5,0.5)).x;
    v = bilinear(read_v, gid).x;
    vec2 off_v = vec2(u, v) * dt;
    vec2 v_sample_loc = vec2(gid) - off_v;
    float next_v = bilinear(read_v, v_sample_loc).x;
    vec2 c_v = gradient(read_v, v_sample_loc);
    next_v += dot(c_v, off_v);

    vec2 vel = vec2(next_u, next_v);
    //vel += float(length(uv) < 0.2) * vec2(0.2, 0);

    // Write semi-lagrangian calc
    imageStore(write_u, gid, vec4(vel.x, 0,0,0));
    imageStore(write_v, gid, vec4(vel.y, 0,0,0));
}
