#version 450
layout (local_size_x = 32, local_size_y = 32) in;

uniform layout(binding=0) sampler2D read_u;
uniform layout(binding=1) sampler2D read_v;
uniform layout(binding=2, rgba32f) restrict image2D write_u;
uniform layout(binding=3, rgba32f) restrict image2D write_v;
uniform layout(location=0) float dt;

vec4 bilinear(sampler2D img, vec2 pt) {
    vec2 size = imageSize(write_u);
    vec2 adjusted = pt + vec2(0.5);
    return texture(img, adjusted / size);
}

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    vec2 size = vec2(imageSize(write_u));

    if (dt == 9999.) {
        vec2 vel = vec2(0);
        imageStore(write_u, gid, vec4(vel.x));
        imageStore(write_v, gid, vec4(vel.y));
        return;
    }

    // Advect dx
    vec4 dx, dy;
    dx = bilinear(read_u, gid);
    dy = bilinear(read_v, gid + vec2(-0.5, 0.5));
    vec4 u_sample_loc_x = float(gid.x) - dx * dt;
    vec4 u_sample_loc_y = float(gid.y) - dy * dt;
    vec4 next_u;
    for (int i = 0; i < 4; i++) {
        next_u[i] = bilinear(
            read_u, 
            vec2(
                u_sample_loc_x[i], 
                u_sample_loc_y[i]
            )
        )[i];
    }

    // Advect dy
    dx = bilinear(read_u, gid);
    dy = bilinear(read_v, gid + vec2(-0.5, 0.5));
    vec4 v_sample_loc_x = float(gid.x) - dx * dt;
    vec4 v_sample_loc_y = float(gid.y) - dy * dt;
    vec4 next_v;
    for (int i = 0; i < 4; i++) {
        next_v[i] = bilinear(
            read_v, 
            vec2(
                v_sample_loc_x[i], 
                v_sample_loc_y[i]
            )
        )[i];
    }

    float k = 13.;
    mat4 boongle = mat4(
        k, -1., 0., 0., 
        1., k, -1., 0., 
        0., 1., k,  0., 
        -1., 0., 1., k 
    );


    boongle /= k;

    //for (int i = 0; i < 4; i++)
        //boongle[i] = normalize(boongle[i]);

    next_u *= boongle;
    next_v *= boongle;

    imageStore(write_u, gid, next_u);
    imageStore(write_v, gid, next_v);
}
