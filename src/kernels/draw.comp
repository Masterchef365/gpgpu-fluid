#version 450
layout (local_size_x = 32, local_size_y = 32) in;

uniform layout(binding=0, r32f) restrict image2D read_u;
uniform layout(binding=1, r32f) restrict image2D read_v;
const uint MAX_FINGIES = 5;
uniform layout(location=1) vec4 pens[MAX_FINGIES];
uniform vec2 screen_size;

const float PEN_RADIUS = 20.;

void main() {
    ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
    vec2 size = vec2(imageSize(read_u));

    vec2 vel = vec2(
        imageLoad(read_u, xy).x,
        imageLoad(read_v, xy).x
    );

    for (int i = 0; i < MAX_FINGIES; i++) {
        vec2 pen_pos = (vec2(0., 1.) - pens[i].xy) * size * vec2(-1, 1);
        pen_pos.x /= size.x/size.y;
        pen_pos.x /= min(screen_size.x, screen_size.y)/screen_size.x;

        vec2 pen_vel = pens[i].zw * size * vec2(1, -1);
        float pen_dist = distance(xy, pen_pos);

        vec2 pen_last_pos = pen_pos - pen_vel;
        if (distance(xy, pen_last_pos) < PEN_RADIUS) {
            vel += pen_vel * 4.;
        }

        if (pen_dist < PEN_RADIUS) {
            vel = pen_vel * 4.;
        }
    }

    if (any(lessThan(xy, ivec2(1))) || any(greaterThan(xy, size-1))) {
        vel = vec2(0);
    }

    // Write semi-lagrangian calc
    imageStore(read_u, xy, vec4(vel.x, 0,0,0));
    imageStore(read_v, xy, vec4(vel.y, 0,0,0));
}

