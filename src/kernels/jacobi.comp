#version 450
layout (local_size_x = 32, local_size_y = 32) in;

uniform layout(binding=0, r32f) restrict image2D read_u;
uniform layout(binding=1, r32f) restrict image2D read_v;
uniform layout(binding=2, r32f) restrict image2D write_u;
uniform layout(binding=3, r32f) restrict image2D write_v;
uniform layout(binding=4, rgba8) restrict image2D boundaries;
uniform layout(location=0) uint parity;

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(read_u);

    if (any(greaterThan(gid, size - 1))) {
        return;
    }

    // Read previous state
    ivec2 top_pos = gid;
    ivec2 bottom_pos = gid + ivec2(0, 1);
    ivec2 left_pos = gid;
    ivec2 right_pos = gid + ivec2(1, 0);

    float left = imageLoad(read_u, left_pos).x;
    float right = imageLoad(read_u, right_pos).x;
    float top = imageLoad(read_v, top_pos).x;
    float bottom = imageLoad(read_v, bottom_pos).x;

    // Decode image info
    vec4 set = imageLoad(boundaries, top_pos);
    vec2 induced_flow = (vec2(set.rg) - (128./255.));
    float forced_divergence = (128./255.) - set.b;
    float amnt = set.a;

    top = mix(top, induced_flow.y, amnt);
    bottom = mix(bottom, induced_flow.y, amnt);
    left = mix(left, induced_flow.x, amnt);
    right = mix(right, induced_flow.x, amnt);

    // Enforce checkerboard pattern
    if (((gid.x % 2) ^ (gid.y % 2)) == parity) {
        // Calculate divergence
        float dx = right - left;
        float dy = bottom - top;

        float dF = (dx + dy) / 4;

        // Factor must be <2. Forces convergence
        const float OVERSTEP = 1.9;
        dF *= OVERSTEP;

        dF += forced_divergence * amnt;

        // Write next state
        imageStore(write_u, left_pos, vec4(left + dF, 0,0,0));
        imageStore(write_u, right_pos, vec4(right - dF, 0,0,0));
        imageStore(write_v, top_pos, vec4(top + dF, 0,0,0));
        imageStore(write_v, bottom_pos, vec4(bottom - dF, 0,0,0));
    }
    return;
}
