#version 450
layout (local_size_x = 32, local_size_y = 32) in;

uniform layout(binding=0, rg32f) restrict image2D read_img;
uniform layout(binding=1, rg32f) restrict image2D write_img;
uniform layout(location=0) uint parity;

void main() {
    ivec2 xy = ivec2(gl_GlobalInvocationID.xy);

    // Enforce checkerboard pattern
    if (((xy.x % 2) ^ (xy.y % 2)) == parity) {
        return;
    }

    // Read previous state
    ivec2 tl_pos = xy;
    ivec2 right_pos = xy + ivec2(1, 0);
    ivec2 bottom_pos = xy + ivec2(0, 1);

    vec2 tl = imageLoad(read_img, xy).xy;
    vec2 right = imageLoad(read_img, right_pos).xy;
    vec2 bottom = imageLoad(read_img, bottom_pos).xy;

    // Calculate divergence
    float dx = right.x - tl.x;
    float dy = bottom.y - tl.y;

    float dF = (dx + dy) / 4;

    // Write next state
    imageStore(write_img, tl_pos, vec4(tl + vec2(dF, dF), 0, 0));
    imageStore(write_img, right_pos, vec4(right - vec2(dF, 0), 0, 0));
    imageStore(write_img, bottom_pos, vec4(bottom - vec2(0, dF), 0, 0));
}
