#version 450
layout (local_size_x = 32) in;

uniform layout(binding=0) sampler2D read_u;
uniform layout(binding=1) sampler2D read_v;
uniform layout(binding=2, r32f) image2D write_img;
layout(std430, binding=4) buffer Particles {
    vec2 particles[];
};
uniform layout(location=0) float dt;

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 437.5453);
}

const float PI = 3.1415926;

void main() {
    uint idx = gl_GlobalInvocationID.x;
    vec2 last_state = particles[idx];

    bool do_reset = dt == 9999.;
    vec2 size = vec2(imageSize(write_img));
    bool out_bounds = last_state.x <= 1.
        || last_state.y <= 1 
        || last_state.x > size.x 
        || last_state.y > size.y;

    if (do_reset || out_bounds) {
        /*
        float rx = rand(last_state + vec2(2344., idx) / 1000);
        float ry = rand(last_state + vec2(1244., idx) / 1000);

        float i = float(idx)/float(particles.length());

        float t = i * PI * 2. * 50.;
        vec2 r = vec2(cos(t), sin(t));
        r *= i;

        r.x *= size.y/size.x;
        r = size * (r + 1.) / 2.;
        */

        float j = float(idx) / float(particles.length());

        j *= PI * 2.;
        vec2 r = vec2(cos(j), sin(j));

        vec2 pseudocoord = vec2(idx, 3240.)/1e3;
        r /= pow(floor(rand(pseudocoord) * 8.), 1./3.);

        r.x *= size.y/size.x;
        r = size * (r + 1.) / 2.;

        particles[idx] = r;
    }

    vec2 uv = particles[idx] / imageSize(write_img);
    float vel_u = texture(read_u, uv).x;
    float vel_v = texture(read_v, uv).x;
    vec2 vel = vec2(vel_u, vel_v);

    particles[idx] += vel * dt;
}
